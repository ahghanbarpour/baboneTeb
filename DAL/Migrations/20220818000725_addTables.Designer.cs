// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.Migrations
{
    [DbContext(typeof(db))]
    [Migration("20220818000725_addTables")]
    partial class addTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("be.Introduction", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("pic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("videoIntro")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("introduction");
                });

            modelBuilder.Entity("be.answer", b =>
                {
                    b.Property<int>("answerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("a")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("point")
                        .HasColumnType("tinyint");

                    b.Property<int>("questionId")
                        .HasColumnType("int");

                    b.Property<int?>("testId")
                        .HasColumnType("int");

                    b.HasKey("answerId");

                    b.HasIndex("questionId");

                    b.HasIndex("testId");

                    b.ToTable("answers");
                });

            modelBuilder.Entity("be.package", b =>
                {
                    b.Property<int>("packageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("coldPdf")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("descript")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("pointLine")
                        .HasColumnType("tinyint");

                    b.Property<float>("price")
                        .HasColumnType("real");

                    b.Property<string>("title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("warmPdf")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("packageId");

                    b.ToTable("packages");
                });

            modelBuilder.Entity("be.question", b =>
                {
                    b.Property<int>("questionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("answerId")
                        .HasColumnType("int");

                    b.Property<int>("packageId")
                        .HasColumnType("int");

                    b.Property<string>("q")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("testId")
                        .HasColumnType("int");

                    b.HasKey("questionId");

                    b.HasIndex("packageId");

                    b.HasIndex("testId");

                    b.ToTable("questions");
                });

            modelBuilder.Entity("be.test", b =>
                {
                    b.Property<int>("testId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("age")
                        .HasColumnType("tinyint");

                    b.Property<int>("answerId")
                        .HasColumnType("int");

                    b.Property<int>("packageId")
                        .HasColumnType("int");

                    b.Property<string>("phoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("testId");

                    b.HasIndex("packageId");

                    b.ToTable("tests");
                });

            modelBuilder.Entity("be.answer", b =>
                {
                    b.HasOne("be.question", "question")
                        .WithMany("answers")
                        .HasForeignKey("questionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("be.test", "test")
                        .WithMany("answers")
                        .HasForeignKey("testId");
                });

            modelBuilder.Entity("be.question", b =>
                {
                    b.HasOne("be.package", "package")
                        .WithMany("questions")
                        .HasForeignKey("packageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("be.test", "test")
                        .WithMany("questions")
                        .HasForeignKey("testId");
                });

            modelBuilder.Entity("be.test", b =>
                {
                    b.HasOne("be.package", "package")
                        .WithMany("tests")
                        .HasForeignKey("packageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
